{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates a test app.",
    "Parameters": {
        "ApplicationName": {
            "Type": "String",
            "Description": "Master Prefix for all resources in the application.",
            "Default": "testapp"
        },
        "HostedZoneId": {
            "Type": "String",
            "Description": "The ID of the Private hosted zone that you want to create Route53 records in."
        },
        "VpcId": {
            "Description": "VPC ID",
            "Type": "AWS::EC2::VPC::Id"
        },
        "AppLoadBalancerSubnetIds": {
            "Description": "An array of subnet IDs, such as subnet-xxxxxx, subnet-xyyyyy.",
            "Type": "List<AWS::EC2::Subnet::Id>",
            "ConstraintDescription": "must be a list of EC2 subnet ids"
        },
        "LoadBalancerDeletionProtection": {
            "Description": "True to enable deletion protection, false to not. Default is false.",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "false"
        },
        "TargetGroupHealthCheckInterval": {
            "Default": "20",
            "Description": "Target Group Health Check Interval",
            "Type": "String"
        },
        "TargetGroupHealthCheckTimeout": {
            "Description": "The amount of time, in seconds, to wait for a response to a health check. Must be less than the value for HealthCheckInterval. The supported values are 2 seconds to 60 seconds.",
            "Type": "String"
        },
        "TargetGroupHealthyThreshold": {
            "Description": "The number of consecutive health probe successes required before moving the instance to the Healthy state.",
            "Type": "String",
            "AllowedPattern": "^([2-9]{1}|10)$"
        },
        "TargetGroupUnhealthyThreshold": {
            "Description": "The number of consecutive health probe failures required before moving the instance to the Unhealthy state.",
            "Type": "String",
            "AllowedPattern": "^([2-9]{1}|10)$"
        },
        "TargetGroupDeregistrationDelayTimeout": {
            "Default": "300",
            "Description": "The amount of time, in seconds, for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. Valid value ranges from 0 to 3600.",
            "Type": "String",
            "AllowedPattern": "^(3600|3[0-5]{1}[0-9]{2}|[1-2]{1}[0-9]{3}|[0-9]{1,3})$"
        },
        "TargetGroupCookieExpirationPeriod": {
            "Description": "The time period, in seconds, after which the cookie is considered stale. If this parameter isn't specified, the sticky session lasts for the duration of the browser session.",
            "Type": "String",
            "AllowedPattern": "^([1-9]{1}[0-9]{0,4}|[1-5]{1}[0-9]{5}|60[0-3]{1}[0-9]{3}|604[0-7]{1}[0-9]{2}|604800)$|^$"
        },
        "TargetType": {
            "Type": "String",
            "Description": "The type of target that you must specify when registering targets with this target group.",
            "AllowedValues": [
                "instance",
                "ip"
            ],
            "Default": "instance"
        },
        "ListenerPort": {
            "Description": "The port number for the load balancer to use when routing App incoming traffic.",
            "Type": "String",
            "Default": "443",
            "AllowedPattern": "(?!^22$)(?!^3389$)(?!^5985$)^([1-9]{1}[0-9]{0,4})$"
        },
        "ListenerProtocol": {
            "Description": "The transport protocol to use for routing App front-end connections (client to load balancer). The supported protocols are HTTP and HTTPS.",
            "Type": "String",
            "AllowedValues": [
                "HTTP",
                "HTTPS",
                "TCP",
                "UDP",
                "TCP_UDP",
                "TLS"
            ]
        },
        "SSLCertificateArn": {
            "Default": "",
            "Description": "The Amazon Resource Name (ARN) of the certificate to associate with the listener, in the form arn:aws:acm:region:account-id:certificate/certificate-id or arn:aws:iam::account-id:server-certificate/certificate-name. Leave blank if Protocol is not HTTPS.",
            "Type": "String",
            "AllowedPattern": "^$|^(arn:aws:acm:[a-z1-9\\-]{9,15}:[0-9]{12}:certificate\/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})$|^(arn:aws:iam::[0-9]{12}:server-certificate\/[\\w+=,.@-]+)$"
        },
        "ListenerAppSSLPolicy": {
            "Default": "",
            "Description": "The security policy that defines the ciphers and protocols that the load balancer supports. Use only if Protocol = HTTPS. See AWS documentation for ALBs for details on default AWS security policies.",
            "Type": "String",
            "AllowedValues": [
                "",
                "ELBSecurityPolicy-FS-1-2-Res-2020-10"
            ]
        },
        "TargetGroupHealthCheckPath": {
            "Default": "/",
            "Description": "The ping path destination where Elastic Load Balancing sends health check requests.",
            "Type": "String"
        },
        "TargetGroupHealthCheckPort": {
            "Default": "",
            "Description": "The port the load balancer uses when performing health checks on targets. The default is traffic-port, which is the port on which each target receives traffic from the load balancer.",
            "Type": "String",
            "AllowedPattern": "^$|^([0-9]{1,5})$"
        },
        "TargetGroupValidHTTPCode": {
            "Default": "200",
            "Description": "The HTTP codes that a healthy target application server must use in response to a health check. You can specify multiple values such as 200,202, or a range of values such as 200-499. Only applicable if HealthCheckTargetProtocol = HTTP or HTTPS.",
            "Type": "String",
            "AllowedPattern": "^(([2-4]{1}[0-9]{2}($|-|,))+)$"
        },
        "TargetPort": {
            "Default": "80",
            "Description": "The TCP port the listener uses to send traffic to the target instance.",
            "Type": "String",
            "AllowedPattern": "(?!^22$)(?!^3389$)(?!^5985$)^([1-9]{1}[0-9]{0,4})$"
        },
        "TargetProtocol": {
            "Description": "The protocol the listener uses for routing traffic to back-end connections (load balancer to backend instance).",
            "Type": "String",
            "AllowedValues": [
                "HTTP",
                "HTTPS",
                "TCP",
                "UDP",
                "TCP_UDP"
            ],
            "Default": "HTTP"
        },
        "TargetGroupHealthCheckProtocol": {
            "Description": "The protocol the load balancer uses when performing health checks on targets.",
            "Type": "String",
            "AllowedValues": [
                "HTTP",
                "HTTPS",
                "TCP",
                "UDP",
                "TCP_UDP"
            ],
            "Default": "HTTP"
        },
        "LaunchTemplateInstanceType": {
            "Description": "App server EC2 instance type",
            "Type": "String",
            "AllowedValues": [
                "t2.nano",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t3.xlarge",
                "t3a.large",
                "t3a.xlarge",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m6i.large",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c5a.xlarge",
                "c5a.2xlarge",
                "c6i.large",
                "c6i.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "LaunchTemplateSecurityGroupIds": {
            "Description": "Security groups that can be used to access the EC2 instances",
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "ConstraintDescription": "must be list of EC2 security group ids"
        },
        "LaunchTemplateAmiId": {
            "Description": "An Amazon EC2 image ID, such as ami-0ffxxxxxxxxx7.",
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "ConstraintDescription": "must be an AMI ID"
        },
        "LaunchTemplateVolumeSize": {
            "Type": "Number",
            "Description": "The size of the C drive volume in GB"
        },
        "LaunchTemplateVolumeType": {
            "Type": "String",
            "Description": "The type of the C drive volume"
        },
        "LaunchTemplateIAMInstanceProfileName": {
            "Description": "The name of an IAM instance profile.",
            "Type": "String"
        },
        "AutoscalingGroupDesiredCapacity": {
            "Description": "The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it attempts to maintain.",
            "Type": "String"
        },
        "AutoscalingGroupMinSize": {
            "Description": "The minimum size of the group.",
            "Type": "String"
        },
        "AutoscalingGroupMaxSize": {
            "Description": "The maximum size of the group.",
            "Type": "String"
        },
        "TagValueEnv": {
            "Description": "Name of the environment",
            "Type": "String",
            "AllowedValues": [
                "DEV",
                "SIT",
                "UAT",
                "PRD"
            ]
        },
        "AppName": {
            "Description": "Name of the application",
            "Type": "String"
        }
    },
    "Conditions": {
        "HasListenerSSLCert": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "SSLCertificateArn"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasListenerSSLPolicy": {
            "Fn::And": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ListenerProtocol"
                        },
                        "TLS"
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "ListenerAppSSLPolicy"
                                },
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        "IsTargetGroupStickinessEnabled": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "TargetGroupCookieExpirationPeriod"
                        },
                        ""
                    ]
                }
            ]
        },
        "NotPrd": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "TagValueEnv"
                        },
                        "PRD"
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "EnvironmentMap": {
            "Lowercase": {
                "DEV": "dev",
                "SIT": "sit",
                "UAT": "uat",
                "PRD": "prd"
            }
        }
    },
    "Resources": {
        "LoadBalancerRecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "HostedZoneId"
                },
                "Name": {
                    "Fn::Sub": [
                        "${ApplicationPrefix}.${EnvPrefix}.test.com",
                        {
                            "ApplicationPrefix": {
                                "Ref": "ApplicationName"
                            },
                            "EnvPrefix": {
                                "Fn::FindInMap": [
                                    "EnvironmentMap",
                                    "Lowercase",
                                    {
                                        "Ref": "TagValueEnv"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "Type": "A",
                "AliasTarget": {
                    "DNSName": {
                        "Fn::GetAtt": [
                            "LoabBalancer",
                            "DNSName"
                        ]
                    },
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "LoabBalancer",
                            "CanonicalHostedZoneID"
                        ]
                    }
                }
            }
        },
        "AppTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ApplicationName"
                            },
                            {
                                "Fn::FindInMap": [
                                    "EnvironmentMap",
                                    "Lowercase",
                                    {
                                        "Ref": "TagValueEnv"
                                    }
                                ]
                            },
                            "tg"
                        ]
                    ]
                },
                "Port": {
                    "Ref": "TargetPort"
                },
                "Protocol": {
                    "Ref": "TargetProtocol"
                },
                "TargetType": {
                    "Ref": "TargetType"
                },
                "TargetGroupAttributes": [
                    {
                        "Key": "deregistration_delay.timeout_seconds",
                        "Value": {
                            "Ref": "TargetGroupDeregistrationDelayTimeout"
                        }
                    },
                    {
                        "Key": "preserve_client_ip.enabled",
                        "Value": "false"
                    },
                    {
                        "Fn::If": [
                            "IsTargetGroupStickinessEnabled",
                            {
                                "Key": "stickiness.enabled",
                                "Value": "true"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "IsTargetGroupStickinessEnabled",
                            {
                                "Key": "stickiness.type",
                                "Value": "lb_cookie"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "IsTargetGroupStickinessEnabled",
                            {
                                "Key": "stickiness.lb_cookie.duration_seconds",
                                "Value": {
                                    "Ref": "TargetGroupCookieExpirationPeriod"
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ],
                "HealthCheckIntervalSeconds": {
                    "Ref": "TargetGroupHealthCheckInterval"
                },
                "HealthCheckPath": {
                    "Ref": "TargetGroupHealthCheckPath"
                },
                "HealthCheckPort": {
                    "Fn::If": [
                        "HasTargetGroupHealthCheckPort",
                        {
                            "Ref": "TargetGroupHealthCheckPort"
                        }
                    ]
                },
                "HealthCheckProtocol": {
                    "Ref": "TargetGroupHealthCheckProtocol"
                },
                "HealthCheckTimeoutSeconds": {
                    "Fn::If": [
                        "IsTargetGroupHealthCheckTimeoutNotEmpty",
                        {
                            "Ref": "TargetGroupHealthCheckTimeout"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "HealthyThresholdCount": {
                    "Ref": "TargetGroupHealthyThreshold"
                },
                "UnhealthyThresholdCount": {
                    "Ref": "TargetGroupUnhealthyThreshold"
                },
                "HealthCheckEnabled": "true",
                "Matcher": {
                    "HttpCode": {
                        "Ref": "TargetGroupValidHTTPCode"
                    }
                },
                "VpcId": {
                    "Ref": "VpcId"
                },
                "Tags": [
                    {
                        "Key": "StackId",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "AppName",
                        "Value": {
                            "Ref": "AppName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ApplicationName"
                                    },
                                    "lic",
                                    {
                                        "Fn::FindInMap": [
                                            "EnvironmentMap",
                                            "Lowercase",
                                            {
                                                "Ref": "TagValueEnv"
                                            }
                                        ]
                                    },
                                    "tg"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "TagValueEnv"
                        }
                    }
                ]
            }
        },
        "Listener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates": {
                    "Fn::If": [
                        "HasListenerSSLCert",
                        [
                            {
                                "CertificateArn": {
                                    "Ref": "SSLCertificateArn"
                                }
                            }
                        ],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "DefaultActions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "TargetGroupApp"
                        },
                        "Type": "forward"
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "LoabBalancer"
                },
                "Port": {
                    "Ref": "ListenerPort"
                },
                "Protocol": {
                    "Ref": "ListenerProtocol"
                }
            }
        },
        "LoabBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "LoadBalancerAttributes": [
                    {
                        "Key": "access_logs.s3.enabled",
                        "Value": "true"
                    },
                    {
                        "Key": "load_balancing.cross_zone.enabled",
                        "Value": "flase"
                    },
                    {
                        "Key": "access_logs.s3.bucket",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::AccountId"
                                    },
                                    "-logs-",
                                    {
                                        "Ref": "AWS::Region"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "access_logs.s3.prefix",
                        "Value": "aws/elbaccess"
                    },
                    {
                        "Key": "deletion_protection.enabled",
                        "Value": {
                            "Ref": "LoadBalancerDeletionProtection"
                        }
                    }
                ],
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ApplicationName"
                            },
                            {
                                "Fn::FindInMap": [
                                    "EnvironmentMap",
                                    "Lowercase",
                                    {
                                        "Ref": "TagValueEnv"
                                    }
                                ]
                            },
                            "pvt",
                            "lb"
                        ]
                    ]
                },
                "Scheme": "internal",
                "Subnets": {
                    "Ref": "AppLoadBalancerSubnetIds"
                },
                "Type": "application",
                "Tags": [
                    {
                        "Key": "StackId",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "AppName",
                        "Value": {
                            "Ref": "AppName"
                        }
                    }
                ]
            }
        },
        "ServerLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "LaunchTemplateName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ApplicationName"
                            },
                            {
                                "Fn::FindInMap": [
                                    "EnvironmentMap",
                                    "Lowercase",
                                    {
                                        "Ref": "TagValueEnv"
                                    }
                                ]
                            },
                            "launchTemplate"
                        ]
                    ]
                },
                "LaunchTemplateData": {
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/sda1",
                            "Ebs": {
                                "VolumeSize": {
                                    "Ref": "LaunchTemplateVolumeSize"
                                },
                                "VolumeType": {
                                    "Ref": "LaunchTemplateVolumeType"
                                },
                                "DeleteOnTermination": true
                            }
                        }
                    ],
                    "SecurityGroupIds": {
                        "Ref": "LaunchTemplateSecurityGroupIds"
                    },
                    "ImageId": {
                        "Ref": "LaunchTemplateAmiId"
                    },
                    "InstanceType": {
                        "Ref": "LaunchTemplateInstanceType"
                    },
                    "IamInstanceProfile": {
                        "Name": {
                            "Ref": "LaunchTemplateIAMInstanceProfileName"
                        }
                    },
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "<powershell>\n",
                                    "</powershell>"
                                ]
                            ]
                        }
                    }
                },
                "TagSpecifications": [
                    {
                        "Tags": [
                            {
                                "Key": "StackId",
                                "Value": {
                                    "Ref": "AWS::StackName"
                                }
                            },
                            {
                                "Key": "Name",
                                "Value": {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            {
                                                "Ref": "ApplicationName"
                                            },
                                            {
                                                "Fn::FindInMap": [
                                                    "EnvironmentMap",
                                                    "Lowercase",
                                                    {
                                                        "Ref": "TagValueEnv"
                                                    }
                                                ]
                                            },
                                            "launchtemplate"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Key": "Env",
                                "Value": {
                                    "Ref": "TagValueEnv"
                                }
                            }
                        ]
                    }
                ]
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "ServerLaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "ServerLaunchTemplate",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "DesiredCapacity": {
                    "Ref": "AutoscalingGroupDesiredCapacity"
                },
                "MaxSize": {
                    "Ref": "AutoscalingGroupMaxSize"
                },
                "MinSize": {
                    "Ref": "AutoscalingGroupMinSize"
                },
                "AutoScalingGroupName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ApplicationName"
                            },
                            {
                                "Fn::FindInMap": [
                                    "EnvironmentMap",
                                    "Lowercase",
                                    {
                                        "Ref": "TagValueEnv"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "TargetGroupARNs": [
                    {
                        "Ref": "AppTargetGroup"
                    }
                ]
            },
            "Tags": [
                {
                    "Key": "StackId",
                    "PropagateAtLaunch": true,
                    "Value": {
                        "Ref": "AWS::StackName"
                    }
                },
                {
                    "Key": "Name",
                    "PropagateAtLaunch": true,
                    "Value": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "ApplicationName"
                                },
                                {
                                    "Fn::FindInMap": [
                                        "EnvironmentMap",
                                        "Lowercase",
                                        {
                                            "Ref": "TagValueEnv"
                                        }
                                    ]
                                },
                                "ec2"
                            ]
                        ]
                    }
                },
                {
                    "Key": "Env",
                    "PropagateAtLaunch": true,
                    "Value": {
                        "Ref": "TagValueEnv"
                    }
                }
            ]
        }
    }
}
